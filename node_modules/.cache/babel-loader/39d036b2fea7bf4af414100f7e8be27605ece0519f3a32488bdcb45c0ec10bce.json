{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { playmakerApi } from './services/playmaker';\nimport { rtkQueryErrorLogger } from './middlewares/error';\nimport reducers from './redux/reducers';\nimport rootSaga from './redux/sagas';\nimport createSagaMiddleware from 'redux-saga';\nconst sagaMiddleware = createSagaMiddleware();\nconst localStorageMiddleware = ({\n  getState\n}) => {\n  // <--- FOCUS HERE\n  return next => action => {\n    const result = next(action);\n    if (getState().theme.Layout) {\n      localStorage.setItem('applicationState2', JSON.stringify(getState().theme.Layout));\n    }\n    return result;\n  };\n};\nconst reHydrateStore = () => {\n  // <-- FOCUS HERE\n\n  if (localStorage.getItem('applicationState2') !== null) {\n    return {\n      theme: {\n        Layout: JSON.parse(localStorage.getItem('applicationState2'))\n      }\n    }; // re-hydrate the store\n  }\n};\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [playmakerApi.reducerPath]: playmakerApi.reducer,\n    theme: reducers\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat([playmakerApi.middleware, rtkQueryErrorLogger, sagaMiddleware, localStorageMiddleware]),\n  preloadedState: reHydrateStore()\n});\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\nsetupListeners(store.dispatch);\nsagaMiddleware.run(rootSaga);","map":{"version":3,"names":["configureStore","setupListeners","playmakerApi","rtkQueryErrorLogger","reducers","rootSaga","createSagaMiddleware","sagaMiddleware","localStorageMiddleware","getState","next","action","result","theme","Layout","localStorage","setItem","JSON","stringify","reHydrateStore","getItem","parse","store","reducer","reducerPath","middleware","getDefaultMiddleware","concat","preloadedState","dispatch","run"],"sources":["C:/Users/smmho/Documents/GitHub/playmaker-ui/src/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport { playmakerApi } from './services/playmaker'\r\nimport { rtkQueryErrorLogger } from './middlewares/error'\r\nimport reducers from './redux/reducers';\r\nimport rootSaga from './redux/sagas';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst localStorageMiddleware = ({ getState }) => { // <--- FOCUS HERE\r\n  return (next) => (action) => {\r\n    const result = next(action);\r\n    if (getState().theme.Layout) {\r\n      localStorage.setItem('applicationState2', JSON.stringify(\r\n        getState().theme.Layout\r\n      ));\r\n    }\r\n    return result;\r\n  };\r\n};\r\n\r\n\r\nconst reHydrateStore = () => { // <-- FOCUS HERE\r\n\r\n  if (localStorage.getItem('applicationState2') !== null) {\r\n    return { theme: { Layout: JSON.parse(localStorage.getItem('applicationState2')) } } // re-hydrate the store\r\n  }\r\n}\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    // Add the generated reducer as a specific top-level slice\r\n    [playmakerApi.reducerPath]: playmakerApi.reducer,\r\n    theme: reducers\r\n  },\r\n  // Adding the api middleware enables caching, invalidation, polling,\r\n  // and other useful features of `rtk-query`.\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat([playmakerApi.middleware, rtkQueryErrorLogger, sagaMiddleware, localStorageMiddleware]),\r\n\r\n  preloadedState: reHydrateStore()\r\n})\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch)\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,MAAMC,cAAc,GAAGD,oBAAoB,CAAC,CAAC;AAE7C,MAAME,sBAAsB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAE;EACjD,OAAQC,IAAI,IAAMC,MAAM,IAAK;IAC3B,MAAMC,MAAM,GAAGF,IAAI,CAACC,MAAM,CAAC;IAC3B,IAAIF,QAAQ,CAAC,CAAC,CAACI,KAAK,CAACC,MAAM,EAAE;MAC3BC,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEC,IAAI,CAACC,SAAS,CACtDT,QAAQ,CAAC,CAAC,CAACI,KAAK,CAACC,MACnB,CAAC,CAAC;IACJ;IACA,OAAOF,MAAM;EACf,CAAC;AACH,CAAC;AAGD,MAAMO,cAAc,GAAGA,CAAA,KAAM;EAAE;;EAE7B,IAAIJ,YAAY,CAACK,OAAO,CAAC,mBAAmB,CAAC,KAAK,IAAI,EAAE;IACtD,OAAO;MAAEP,KAAK,EAAE;QAAEC,MAAM,EAAEG,IAAI,CAACI,KAAK,CAACN,YAAY,CAACK,OAAO,CAAC,mBAAmB,CAAC;MAAE;IAAE,CAAC,EAAC;EACtF;AACF,CAAC;AAED,OAAO,MAAME,KAAK,GAAGtB,cAAc,CAAC;EAClCuB,OAAO,EAAE;IACP;IACA,CAACrB,YAAY,CAACsB,WAAW,GAAGtB,YAAY,CAACqB,OAAO;IAChDV,KAAK,EAAET;EACT,CAAC;EACD;EACA;EACAqB,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAAC,CAACzB,YAAY,CAACuB,UAAU,EAAEtB,mBAAmB,EAAEI,cAAc,EAAEC,sBAAsB,CAAC,CAAC;EAEvHoB,cAAc,EAAET,cAAc,CAAC;AACjC,CAAC,CAAC;;AAEF;AACA;AACAlB,cAAc,CAACqB,KAAK,CAACO,QAAQ,CAAC;AAE9BtB,cAAc,CAACuB,GAAG,CAACzB,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}